// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(PublicDBContext))]
    partial class PublicDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.CategoryCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("Updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("Updated_at"));

                    b.HasKey("Id");

                    b.ToTable("category_catalogs", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CategoryOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryCatalog_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int>("OptionResponse_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("Updated_at"));

                    b.HasKey("Id");

                    b.HasIndex("CategoryCatalog_Id");

                    b.HasIndex("OptionResponse_Id");

                    b.ToTable("category_options", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Chapter_number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("chapter_number");

                    b.Property<string>("Chapter_title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chapter_title");

                    b.Property<string>("Componenthtml")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("componenthtml");

                    b.Property<string>("Componentreact")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("componentreact");

                    b.Property<DateTime>("Created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int>("Survey_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("Updated_at"));

                    b.HasKey("Id");

                    b.HasIndex("Survey_Id");

                    b.ToTable("chapters", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OptionQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryCatalog_Id")
                        .HasColumnType("int");

                    b.Property<string>("Comment_optionres")
                        .HasColumnType("text")
                        .HasColumnName("comment_optionres");

                    b.Property<DateTime>("Created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Number_option")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("number_option");

                    b.Property<int>("OptionResponse_Id")
                        .HasColumnType("int");

                    b.Property<int>("Question_Id")
                        .HasColumnType("int");

                    b.Property<int>("SubQuestion_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("Updated_at"));

                    b.HasKey("Id");

                    b.HasIndex("CategoryCatalog_Id");

                    b.HasIndex("OptionResponse_Id");

                    b.HasIndex("Question_Id");

                    b.HasIndex("SubQuestion_Id");

                    b.ToTable("option_questions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OptionResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Option_text")
                        .HasColumnType("text")
                        .HasColumnName("option_text");

                    b.Property<DateTime>("Updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("Updated_at"));

                    b.HasKey("Id");

                    b.ToTable("OptionResponses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Chapter_Id")
                        .HasColumnType("int");

                    b.Property<string>("Comment_question")
                        .HasColumnType("text")
                        .HasColumnName("comment_question");

                    b.Property<DateTime>("Created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Question_number")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("question_number");

                    b.Property<string>("Question_text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_text");

                    b.Property<string>("Response_type")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("response_type");

                    b.Property<DateTime>("Updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("Updated_at"));

                    b.HasKey("Id");

                    b.HasIndex("Chapter_Id");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SubQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment_subquestion")
                        .HasColumnType("text")
                        .HasColumnName("comment_subquestion");

                    b.Property<DateTime>("Created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int>("Question_Id")
                        .HasColumnType("int");

                    b.Property<string>("Subquestion_number")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("subquestion_number");

                    b.Property<string>("Subquestion_text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subquestion_text");

                    b.Property<DateTime>("Updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("Updated_at"));

                    b.HasKey("Id");

                    b.HasIndex("Question_Id");

                    b.ToTable("SubQuestions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SumaryOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code_number")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code_number");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Question_Id")
                        .HasColumnType("int");

                    b.Property<int>("Survey_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Valuerta")
                        .HasColumnType("text")
                        .HasColumnName("valuerta");

                    b.HasKey("Id");

                    b.HasIndex("Question_Id");

                    b.HasIndex("Survey_Id");

                    b.ToTable("SumaryOptions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Componenthtml")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("componenthtml");

                    b.Property<string>("Componentreact")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("componentreact");

                    b.Property<DateTime>("Created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Instruction")
                        .HasColumnType("text")
                        .HasColumnName("instruction");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("Updated_at")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("Updated_at"));

                    b.HasKey("Id");

                    b.ToTable("surveys", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CategoryOption", b =>
                {
                    b.HasOne("Domain.Entities.CategoryCatalog", "CategoryCatalog")
                        .WithMany("CategoryOptions")
                        .HasForeignKey("CategoryCatalog_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OptionResponse", "OptionResponse")
                        .WithMany("CategoryOptions")
                        .HasForeignKey("OptionResponse_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryCatalog");

                    b.Navigation("OptionResponse");
                });

            modelBuilder.Entity("Domain.Entities.Chapter", b =>
                {
                    b.HasOne("Domain.Entities.Survey", "Survey")
                        .WithMany("Chapters")
                        .HasForeignKey("Survey_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.Entities.OptionQuestion", b =>
                {
                    b.HasOne("Domain.Entities.CategoryCatalog", "CategoryCatalog")
                        .WithMany("OptionQuestions")
                        .HasForeignKey("CategoryCatalog_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OptionResponse", "OptionResponse")
                        .WithMany("OptionQuestions")
                        .HasForeignKey("OptionResponse_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("OptionQuestions")
                        .HasForeignKey("Question_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SubQuestion", "SubQuestion")
                        .WithMany("OptionQuestions")
                        .HasForeignKey("SubQuestion_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryCatalog");

                    b.Navigation("OptionResponse");

                    b.Navigation("Question");

                    b.Navigation("SubQuestion");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.HasOne("Domain.Entities.Chapter", "Chapter")
                        .WithMany("Questions")
                        .HasForeignKey("Chapter_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("Domain.Entities.SubQuestion", b =>
                {
                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("SubQuestions")
                        .HasForeignKey("Question_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entities.SumaryOption", b =>
                {
                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("SumaryOptions")
                        .HasForeignKey("Question_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Survey", "Survey")
                        .WithMany("SumaryOptions")
                        .HasForeignKey("Survey_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.Entities.CategoryCatalog", b =>
                {
                    b.Navigation("CategoryOptions");

                    b.Navigation("OptionQuestions");
                });

            modelBuilder.Entity("Domain.Entities.Chapter", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Domain.Entities.OptionResponse", b =>
                {
                    b.Navigation("CategoryOptions");

                    b.Navigation("OptionQuestions");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Navigation("OptionQuestions");

                    b.Navigation("SubQuestions");

                    b.Navigation("SumaryOptions");
                });

            modelBuilder.Entity("Domain.Entities.SubQuestion", b =>
                {
                    b.Navigation("OptionQuestions");
                });

            modelBuilder.Entity("Domain.Entities.Survey", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("SumaryOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
